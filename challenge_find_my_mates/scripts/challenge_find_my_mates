#!/usr/bin/env python
import robot_smach_states as states
import robot_smach_states.util.designators as ds
import rospy
import smach

from robot_smach_states.util import startup
from robocup_knowledge import load_knowledge
from challenge_find_my_mates import LocatePeople, ReportPeople

challenge_knowledge = load_knowledge('challenge_find_my_mates')

STARTING_POINT = challenge_knowledge.starting_point
ROOM_ID = challenge_knowledge.room
SEARCH_POINT = challenge_knowledge.search_point
OPERATOR_POINT = challenge_knowledge.starting_point


def setup_statemachine(robot):
    sm = smach.StateMachine(outcomes=['done', 'failed', 'aborted'])

    with sm:
        smach.StateMachine.add('START_CHALLENGE_ROBUST', states.StartChallengeRobust(robot, STARTING_POINT),
                               transitions={'Done': 'GO_TO_SEARCH_POSE',
                                            'Aborted': 'aborted',
                                            'Failed': 'GO_TO_SEARCH_POSE'})

        smach.StateMachine.add('SAY_START',
                               states.Say(robot, "Finding your mates, here we go!", block=False),
                               transitions={'spoken': 'GO_TO_SEARCH_POSE'})

        smach.StateMachine.add('GO_TO_SEARCH_POSE',
                               states.NavigateToWaypoint(robot, ds.EntityByIdDesignator(robot, id=SEARCH_POINT),
                                                         radius=0.375),
                               transitions={'arrived': 'LOCATE_PEOPLE',
                                            'goal_not_defined': 'failed',
                                            'unreachable': 'WAIT_SEARCH_POSE'})

        smach.StateMachine.add('WAIT_SEARCH_POSE',
                               states.WaitTime(robot, 5),
                               transitions={'preempted': 'aborted',
                                            'waited': 'GO_TO_SEARCH_POSE'})

        # ToDo: add state to rise robot and tell people to look the robot's way

        # locate all four people
        smach.StateMachine.add('LOCATE_PEOPLE',
                               LocatePeople(robot,
                                            room_id=ROOM_ID
                                            ),
                               transitions={'done': 'GO_BACK_TO_OPERATOR',
                                            }
                               )

        # ToDo: move body back to driving pose

        # drive back to the operator to describe the mates
        smach.StateMachine.add('GO_BACK_TO_OPERATOR',
                               states.NavigateToWaypoint(
                                   robot, ds.EntityByIdDesignator(robot, id=OPERATOR_POINT),
                                   radius=0.7, look_at_designator=ds.EntityByIdDesignator(robot, id=OPERATOR_POINT)),
                               transitions={'arrived': 'REPORT_PEOPLE',
                                            'goal_not_defined': 'REPORT_PEOPLE',
                                            'unreachable': 'WAIT_GO_BACK'})

        smach.StateMachine.add('WAIT_GO_BACK',
                               states.WaitTime(robot, 5),
                               transitions={'preempted': 'aborted',
                                            'waited': 'GO_BACK_TO_OPERATOR'})

        # check how to uniquely define them  # ToDo: make this more interesting
        smach.StateMachine.add('REPORT_PEOPLE', ReportPeople(robot),
                               transitions={'done': 'done'}
                               )

    return sm


if __name__ == '__main__':
    rospy.init_node('find_my_mates_exec')
    startup(setup_statemachine, challenge_name="find_my_mates")
